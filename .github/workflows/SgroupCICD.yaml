name: sgroup CI/CD
# Các sự kiện mà workflows sẽ chạy ( Webhook Events )
on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main
# Chuỗi các task sẽ thực hiện khi lắng nghe các sự kiện
jobs:
  job_1:
      name: Checkout code and build Docker image
      # Xác định Environment Dev chạy job
      runs-on: ubuntu-latest  
      # Các task nhỏ / step thực thi job
      steps: 
      # Pull code trên git reposity về máy ảo Ubuntu chạy job này
        - name: Checkout code and pull from git reposity
          uses: actions/checkout@v4
      # Login vào Docker Hub
        - name: Login Docker Hub
          uses: docker/login-action@v3
          with: 
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      # Build docker image
        - name: Build and push docker image
          run: |
            docker build -t ${{ secrets.DOCKER_USERNAME }}/sgroupdevop:latest .
            docker push ${{ secrets.DOCKER_USERNAME }}/sgroupdevop:latest
  job_2:
      needs: [ job_1 ]
      name: SSH into EC2 instance 
      # Xác định Environment Dev chạy job
      runs-on: ubuntu-latest
      # Các task nhỏ / step thực thi job
      steps: 
        - name: SSH into EC2 instance
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USERNAME }}
            key: ${{ secrets.EC2_SSH_KEY }}
          run: |
            echo "${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}"
  job_3: 
      needs: [ job_1, job_2 ]
      name: Deploy
      # Xác định Environment Dev chạy job
      runs-on: ubuntu-latest
      # Các task nhỏ / step thực thi job
      steps: 
        - name: Check and create new file .env
          run: |
            if [ -f .env ]; then
              echo ".env existed";
              rm .env || true;
              echo ".env has been removed";
              touch .env;
            else
              touch .env;
            fi

        - name: Setup file .env
          run: |
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "LOCAL_HOST=${{ secrets.LOCAL_HOST }}" >> .env
            echo "USER=${{ secrets.USER }}" >> .env
            echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
            echo "DATABASE=${{ secrets.DATABASE }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
            echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env

        - name: Pull Docker image and Run
          run: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/sgroupdevop:latest
            docker rm -f myapp-container || true
            docker run -d --name myapp-container --network cunity-network \
            --env-file .env \
            -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            ${{ secrets.DOCKER_USERNAME }}/sgroupdevop:latest
            



      